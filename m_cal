vec(A) * vec(b) = abs(A)* abs(b) * cos(alpha) = a1*b1 + a2*b2 + ... + an*bn

                | a1 a2 a3 |
det (A, B, C) = | b1 b2 b3 | 
                | c1 c2 c3 |

Geometricly :
det (A, B, C) = [+|-] value of parallelepiped => another formaula for value of parallelepiped: A * (BxC) => det (A, B, C) = A * (BxC)

Cross - product

        _   _   _
      | i , j,  k  |
AxB = | a1, a2, a3 | {i, j, k is unit vectors => AxB is vector not a number like det(A, B, C)}
      | b1, b2, b3 |

|A x B| -> area of parallelogram of A and B
dir(A x B) -> perpendicular to the plane of parallelogram { right hand rule for perpendicular direction }

Equation:
AxB == -BxA
AxA == 0

Equation1 of plane with 3 points (p1, p2, p3) => for each p on plance should be det(p1p, p1p2, p1p3) == 0 (see line 8)
Equation2 of plane with 3 points <=> p1p perpendicular of N (normal vector) => p1p * N == 0 ( line 1) => we need N => N == p1p2 x p1p3

A^-1 == 1/det(A) * adj(A)
adj(A) = ?

step_1
MINORS - remove column and row & compute determinant for (i, j)

step_2
COFACTORS - flip sign in checkboard

step_3
transpose

(step_1 + step_2 + step_3) == adj(A)

--------------------------------------------------------------------------------------------------------------------
plane ax + by + cz = d

A is invertable <=> det(A) != 0

HOMOGENEOUS SYSTEM : Ax = 0

A (3x3)
det(A) = 0 => det(N1, N2, N3) = 0 => lay on same plane (coplanar)

Normal vector [ortogonal to N1, N2, N3] of (N1, N2, N3) will be line (which is intersaction of eq1, eq2, eq3)

line - intersaction of two planes

parameteric equation of lines:

Q(t) when Q(0) = Q0 and Q(1) = Q1

_____        ____
Q0Q(t) = t * Q0Q1
                ____
Q(t) = Q0 + t * Q0Q1

--------------------------------------------------------------------------------------------------------------------
A^-1 exists <=> det(A) != 0
det(A) != 0 => Ax=b has unique solution x = A^-1b
det(A) != 0 => Ax=0 has only trivial solution x = 0
det(A) == 0 => Ax=0 has non-trivial solution
det(A) == 0 => Ax=b usually has no solution, but has solution for some b
--------------------------------------------------------------------------------------------------------------------
parameteric equation r = r(t)
                _
velocity vector v = dr/dt
                    _
accelaration vector a = dv/dt
     _
T^ = v / |v|

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Partial derivatives

Single variable derivative formula
-----------------------------------
f'(x) = df/dx = lim (f(x + x') - f(x)) / x' [x' -> 0] - single variable
approximation formula f(x) ~ f(x0) + f'(x0)(x - x0)

d'f/d'x (x0, y0) = lim (f(x0 + x', y0) - f(x0, y0))/x' [x' -> 0] -> partial derivative by x (same with y)
approximation formaula 
x-> x' + x
y-> y' + y
z = f(x, y) z' = f'x * x' + f'y * y'
f'x tangent + f'y tangent = tangent plane

z = z0 + a(x - x0) + b(y - y0) - tangent plane
a = f'x(x0, y0)
b = f'y(x0, y0)

MAX and MIN (critical point)

* At local min or max both f'x = 0 and f'y = 0 <=> tangent plane for z = f(x, y) is horizontal;

App

LIST SQUARES INTERPOLATION

(x1, y1) ... (xN, yN) find line to approximate y = ax + b
minimizing total square deviation
deviation = yi - (axi + b)

MINIMIZE Dev(a, b) = sum (yi - (axi + b))^2 for all i

Solve: find critical point => D'a = 0 and D'b = 0;

D'a = sum(2 * (yi - (axi + b)) * (-xi)) = 0
D'b = sum(2 * (yi - (axi + b)) * (-1)) = 0
and solve system 

IN GENERAL FOR EXPONENTIAL FIT

y = c * e^ax

Second derivation test

(x0, y0) is critical point for f

than compute A = f'xx(x0, y0) B = f'xy(x0, y0) C = f'yy(x0, y0)

if AC - B^2 > 0 A > 0 local minimum
if AC - B^2 > 0 A < 0 local maximum
if AC - B^2 < 0 saddle point
if AC - B^2 == 0 we don't know

Quadratic approximation

delta_f = f'x(x - x0) + f'y(y - y0) + 0.5f'xx(x - x0)^2 + f'xy(x - x0)(y - y0) + 0.5f'yy(y - y0)^2

Differentials

df/dt = f'(x) when f = f(x)

total differential : f(x, y, z)

df = f'xdx + f'ydy + f'zdz

DIFFERENTIALS IS NOT SAME delta_f

can do with differentials:
[1] how x, y, z, changes affect f
[2] PH for delta_x, delta_y, delta_z to get approximation formula
[3] divide by dt to get rate of change

x = x(t) y = y(t) z = z(t)

df/dt = f'x dx/dt + f'y dy/dt + f'z dz/dt - CHAIN RULL

chain rull with more variable

w = f(x, y) x = x(u, v) y = y(u, v) z = z(u, v)

∂f/∂u = ∂f/∂x * ∂x/∂u + ∂f/∂y * ∂y/∂u
∂f/∂v = ∂f/∂x * ∂x/∂v + ∂f/∂y * ∂y/∂v

EX: f = f(x, y) x = rcosm y = rsinm

∂f/∂r = ∂f/∂x * ∂x/∂r + ∂f/∂y * ∂y/∂r = f'x * cosm + f'y * sinm

df/dt = f'x dx/dt + f'y dy/dt + f'z dz/dt => df/dt = grad_f * dr/dt
grad_f = <f'x, f'y, f'z> 
dr/dt = <dx/dt, dy/dt, dz/dt>

T1:
grad_w is perpendicular level surface { w = constant }

Directional derivatives

dw/ds = grad_w * dr/ds = grad_w * u^

dw/ds | u^ = grad_w * u^ = |grad_w| * |u^| * cos(t) = |grad_w| * cos(t) because u^ is unit vector
=> largest than cos(t) = 1; => t = 0 => u = dir(grad)

=> DIRECTION OF GRAD W IS DIRECTION OF FASTEST INCREASE OF W FOR GIVEN POINT

|GRAD W| = dw/ds | u^ = dir(grad_w)

=> fastest dicrease is cos(t) = -1 => t = 180 => u = - dir(grad)

=> no changes cos(t) = 0 => t = 90 => u^ perpendicular to grad_w

LAGRANGE MULTIPLIERS min/max f(x, y, z) with constraint (g(x, y, z) = c
grad_f * grad_g = 0

|-> if we looking min/max of f on g => df/ds|u^ (u^ on g(x, y, z) = c) = 0; => grad_f * u^ = 0; 
    but grad_g * u^ = 0; => grad_f = Lambda_l * grad_g <-|

-----------------------------------------------------------------------------------------------

non independent variables

g(x, y, z) = c ∂x/∂z - ? ∂x/∂y - ?

dg = g'xdx + g'y dy + g'zdz = 0 because c is constant

∂z/∂x = - g'x / g'z, y = constant

(∂f/∂x)y - keep y constant

------------- TOPIC -------------

- contor plot
- f'x = ∂f/∂x
- ∇f = <f'x, f'y, f'z>
  tangent plane approximation Δf ~ f'x Δx + f'y Δy + f'z Δz = ∇f*Δr
  tangent plane to level surface: noraml vector = ∇f

- Non independent variables : g(x, y, z) = c
    -> min/max lagrange multiplayer
       f -> min/max && g(x, y, z) = c
       ∇f = λ*∇g

    -> constraint partial derivation
        (∂f/∂z)y = f'x(-g'z/g'x) + f'z 
